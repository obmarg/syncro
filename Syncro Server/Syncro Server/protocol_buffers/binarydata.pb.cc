// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "binarydata.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace syncro {

namespace {

const ::google::protobuf::Descriptor* BinaryPacketHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryPacketHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BinaryPacketHeader_SectionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_binarydata_2eproto() {
  protobuf_AddDesc_binarydata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "binarydata.proto");
  GOOGLE_CHECK(file != NULL);
  BinaryPacketHeader_descriptor_ = file->message_type(0);
  static const int BinaryPacketHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPacketHeader, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPacketHeader, fileoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPacketHeader, hashsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPacketHeader, binarypackettype_),
  };
  BinaryPacketHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryPacketHeader_descriptor_,
      BinaryPacketHeader::default_instance_,
      BinaryPacketHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPacketHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPacketHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryPacketHeader));
  BinaryPacketHeader_SectionType_descriptor_ = BinaryPacketHeader_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_binarydata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryPacketHeader_descriptor_, &BinaryPacketHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_binarydata_2eproto() {
  delete BinaryPacketHeader::default_instance_;
  delete BinaryPacketHeader_reflection_;
}

void protobuf_AddDesc_binarydata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020binarydata.proto\022\006syncro\"\275\001\n\022BinaryPac"
    "ketHeader\022\020\n\010FileSize\030\001 \001(\005\022\022\n\nFileOffse"
    "t\030\002 \001(\005\022\020\n\010HashSize\030\003 \001(\005\022@\n\020BinaryPacke"
    "tType\030\004 \001(\0162&.syncro.BinaryPacketHeader."
    "SectionType\"-\n\013SectionType\022\t\n\005START\020\000\022\n\n"
    "\006MIDDLE\020\001\022\007\n\003END\020\002B\025\n\023uk.me.grambo.syncr"
    "o", 241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "binarydata.proto", &protobuf_RegisterTypes);
  BinaryPacketHeader::default_instance_ = new BinaryPacketHeader();
  BinaryPacketHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_binarydata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_binarydata_2eproto {
  StaticDescriptorInitializer_binarydata_2eproto() {
    protobuf_AddDesc_binarydata_2eproto();
  }
} static_descriptor_initializer_binarydata_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* BinaryPacketHeader_SectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryPacketHeader_SectionType_descriptor_;
}
bool BinaryPacketHeader_SectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BinaryPacketHeader_SectionType BinaryPacketHeader::START;
const BinaryPacketHeader_SectionType BinaryPacketHeader::MIDDLE;
const BinaryPacketHeader_SectionType BinaryPacketHeader::END;
const BinaryPacketHeader_SectionType BinaryPacketHeader::SectionType_MIN;
const BinaryPacketHeader_SectionType BinaryPacketHeader::SectionType_MAX;
const int BinaryPacketHeader::SectionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BinaryPacketHeader::kFileSizeFieldNumber;
const int BinaryPacketHeader::kFileOffsetFieldNumber;
const int BinaryPacketHeader::kHashSizeFieldNumber;
const int BinaryPacketHeader::kBinaryPacketTypeFieldNumber;
#endif  // !_MSC_VER

BinaryPacketHeader::BinaryPacketHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BinaryPacketHeader::InitAsDefaultInstance() {
}

BinaryPacketHeader::BinaryPacketHeader(const BinaryPacketHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BinaryPacketHeader::SharedCtor() {
  _cached_size_ = 0;
  filesize_ = 0;
  fileoffset_ = 0;
  hashsize_ = 0;
  binarypackettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryPacketHeader::~BinaryPacketHeader() {
  SharedDtor();
}

void BinaryPacketHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryPacketHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryPacketHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryPacketHeader_descriptor_;
}

const BinaryPacketHeader& BinaryPacketHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_binarydata_2eproto();  return *default_instance_;
}

BinaryPacketHeader* BinaryPacketHeader::default_instance_ = NULL;

BinaryPacketHeader* BinaryPacketHeader::New() const {
  return new BinaryPacketHeader;
}

void BinaryPacketHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filesize_ = 0;
    fileoffset_ = 0;
    hashsize_ = 0;
    binarypackettype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryPacketHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FileSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filesize_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FileOffset;
        break;
      }
      
      // optional int32 FileOffset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fileoffset_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HashSize;
        break;
      }
      
      // optional int32 HashSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HashSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hashsize_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BinaryPacketType;
        break;
      }
      
      // optional .syncro.BinaryPacketHeader.SectionType BinaryPacketType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BinaryPacketType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::syncro::BinaryPacketHeader_SectionType_IsValid(value)) {
            set_binarypackettype(static_cast< ::syncro::BinaryPacketHeader_SectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinaryPacketHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 FileSize = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->filesize(), output);
  }
  
  // optional int32 FileOffset = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fileoffset(), output);
  }
  
  // optional int32 HashSize = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hashsize(), output);
  }
  
  // optional .syncro.BinaryPacketHeader.SectionType BinaryPacketType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->binarypackettype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinaryPacketHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 FileSize = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->filesize(), target);
  }
  
  // optional int32 FileOffset = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fileoffset(), target);
  }
  
  // optional int32 HashSize = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hashsize(), target);
  }
  
  // optional .syncro.BinaryPacketHeader.SectionType BinaryPacketType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->binarypackettype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinaryPacketHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FileSize = 1;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filesize());
    }
    
    // optional int32 FileOffset = 2;
    if (has_fileoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fileoffset());
    }
    
    // optional int32 HashSize = 3;
    if (has_hashsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hashsize());
    }
    
    // optional .syncro.BinaryPacketHeader.SectionType BinaryPacketType = 4;
    if (has_binarypackettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->binarypackettype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryPacketHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryPacketHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryPacketHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryPacketHeader::MergeFrom(const BinaryPacketHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_filesize(from.filesize());
    }
    if (from._has_bit(1)) {
      set_fileoffset(from.fileoffset());
    }
    if (from._has_bit(2)) {
      set_hashsize(from.hashsize());
    }
    if (from._has_bit(3)) {
      set_binarypackettype(from.binarypackettype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryPacketHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryPacketHeader::CopyFrom(const BinaryPacketHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryPacketHeader::IsInitialized() const {
  
  return true;
}

void BinaryPacketHeader::Swap(BinaryPacketHeader* other) {
  if (other != this) {
    std::swap(filesize_, other->filesize_);
    std::swap(fileoffset_, other->fileoffset_);
    std::swap(hashsize_, other->hashsize_);
    std::swap(binarypackettype_, other->binarypackettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryPacketHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryPacketHeader_descriptor_;
  metadata.reflection = BinaryPacketHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace syncro

// @@protoc_insertion_point(global_scope)
