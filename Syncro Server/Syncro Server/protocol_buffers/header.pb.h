// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#ifndef PROTOBUF_header_2eproto__INCLUDED
#define PROTOBUF_header_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace syncro {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_header_2eproto();
void protobuf_AssignDesc_header_2eproto();
void protobuf_ShutdownFile_header_2eproto();

class PacketHeader;

// ===================================================================

class PacketHeader : public ::google::protobuf::Message {
 public:
  PacketHeader();
  virtual ~PacketHeader();
  
  PacketHeader(const PacketHeader& from);
  
  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader& default_instance();
  
  void Swap(PacketHeader* other);
  
  // implements Message ----------------------------------------------
  
  PacketHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 packet_type = 1;
  inline bool has_packet_type() const;
  inline void clear_packet_type();
  static const int kPacketTypeFieldNumber = 1;
  inline ::google::protobuf::int32 packet_type() const;
  inline void set_packet_type(::google::protobuf::int32 value);
  
  // repeated int32 subpacket_sizes = 2;
  inline int subpacket_sizes_size() const;
  inline void clear_subpacket_sizes();
  static const int kSubpacketSizesFieldNumber = 2;
  inline ::google::protobuf::int32 subpacket_sizes(int index) const;
  inline void set_subpacket_sizes(int index, ::google::protobuf::int32 value);
  inline void add_subpacket_sizes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      subpacket_sizes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_subpacket_sizes();
  
  // @@protoc_insertion_point(class_scope:syncro.pb.PacketHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 packet_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > subpacket_sizes_;
  friend void  protobuf_AddDesc_header_2eproto();
  friend void protobuf_AssignDesc_header_2eproto();
  friend void protobuf_ShutdownFile_header_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PacketHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// PacketHeader

// required int32 packet_type = 1;
inline bool PacketHeader::has_packet_type() const {
  return _has_bit(0);
}
inline void PacketHeader::clear_packet_type() {
  packet_type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 PacketHeader::packet_type() const {
  return packet_type_;
}
inline void PacketHeader::set_packet_type(::google::protobuf::int32 value) {
  _set_bit(0);
  packet_type_ = value;
}

// repeated int32 subpacket_sizes = 2;
inline int PacketHeader::subpacket_sizes_size() const {
  return subpacket_sizes_.size();
}
inline void PacketHeader::clear_subpacket_sizes() {
  subpacket_sizes_.Clear();
}
inline ::google::protobuf::int32 PacketHeader::subpacket_sizes(int index) const {
  return subpacket_sizes_.Get(index);
}
inline void PacketHeader::set_subpacket_sizes(int index, ::google::protobuf::int32 value) {
  subpacket_sizes_.Set(index, value);
}
inline void PacketHeader::add_subpacket_sizes(::google::protobuf::int32 value) {
  subpacket_sizes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PacketHeader::subpacket_sizes() const {
  return subpacket_sizes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PacketHeader::mutable_subpacket_sizes() {
  return &subpacket_sizes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace syncro

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_header_2eproto__INCLUDED
