// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: binarydata.proto

#ifndef PROTOBUF_binarydata_2eproto__INCLUDED
#define PROTOBUF_binarydata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace syncro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_binarydata_2eproto();
void protobuf_AssignDesc_binarydata_2eproto();
void protobuf_ShutdownFile_binarydata_2eproto();

class BinaryPacketHeader;

enum BinaryPacketHeader_SectionType {
  BinaryPacketHeader_SectionType_START = 0,
  BinaryPacketHeader_SectionType_MIDDLE = 1,
  BinaryPacketHeader_SectionType_END = 2
};
bool BinaryPacketHeader_SectionType_IsValid(int value);
const BinaryPacketHeader_SectionType BinaryPacketHeader_SectionType_SectionType_MIN = BinaryPacketHeader_SectionType_START;
const BinaryPacketHeader_SectionType BinaryPacketHeader_SectionType_SectionType_MAX = BinaryPacketHeader_SectionType_END;
const int BinaryPacketHeader_SectionType_SectionType_ARRAYSIZE = BinaryPacketHeader_SectionType_SectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BinaryPacketHeader_SectionType_descriptor();
inline const ::std::string& BinaryPacketHeader_SectionType_Name(BinaryPacketHeader_SectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BinaryPacketHeader_SectionType_descriptor(), value);
}
inline bool BinaryPacketHeader_SectionType_Parse(
    const ::std::string& name, BinaryPacketHeader_SectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BinaryPacketHeader_SectionType>(
    BinaryPacketHeader_SectionType_descriptor(), name, value);
}
// ===================================================================

class BinaryPacketHeader : public ::google::protobuf::Message {
 public:
  BinaryPacketHeader();
  virtual ~BinaryPacketHeader();
  
  BinaryPacketHeader(const BinaryPacketHeader& from);
  
  inline BinaryPacketHeader& operator=(const BinaryPacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryPacketHeader& default_instance();
  
  void Swap(BinaryPacketHeader* other);
  
  // implements Message ----------------------------------------------
  
  BinaryPacketHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinaryPacketHeader& from);
  void MergeFrom(const BinaryPacketHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BinaryPacketHeader_SectionType SectionType;
  static const SectionType START = BinaryPacketHeader_SectionType_START;
  static const SectionType MIDDLE = BinaryPacketHeader_SectionType_MIDDLE;
  static const SectionType END = BinaryPacketHeader_SectionType_END;
  static inline bool SectionType_IsValid(int value) {
    return BinaryPacketHeader_SectionType_IsValid(value);
  }
  static const SectionType SectionType_MIN =
    BinaryPacketHeader_SectionType_SectionType_MIN;
  static const SectionType SectionType_MAX =
    BinaryPacketHeader_SectionType_SectionType_MAX;
  static const int SectionType_ARRAYSIZE =
    BinaryPacketHeader_SectionType_SectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SectionType_descriptor() {
    return BinaryPacketHeader_SectionType_descriptor();
  }
  static inline const ::std::string& SectionType_Name(SectionType value) {
    return BinaryPacketHeader_SectionType_Name(value);
  }
  static inline bool SectionType_Parse(const ::std::string& name,
      SectionType* value) {
    return BinaryPacketHeader_SectionType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 FileSize = 1;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFileSizeFieldNumber = 1;
  inline ::google::protobuf::int32 filesize() const;
  inline void set_filesize(::google::protobuf::int32 value);
  
  // optional int32 FileOffset = 2;
  inline bool has_fileoffset() const;
  inline void clear_fileoffset();
  static const int kFileOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 fileoffset() const;
  inline void set_fileoffset(::google::protobuf::int32 value);
  
  // optional int32 HashSize = 3;
  inline bool has_hashsize() const;
  inline void clear_hashsize();
  static const int kHashSizeFieldNumber = 3;
  inline ::google::protobuf::int32 hashsize() const;
  inline void set_hashsize(::google::protobuf::int32 value);
  
  // optional .syncro.BinaryPacketHeader.SectionType BinaryPacketType = 4;
  inline bool has_binarypackettype() const;
  inline void clear_binarypackettype();
  static const int kBinaryPacketTypeFieldNumber = 4;
  inline ::syncro::BinaryPacketHeader_SectionType binarypackettype() const;
  inline void set_binarypackettype(::syncro::BinaryPacketHeader_SectionType value);
  
  // @@protoc_insertion_point(class_scope:syncro.BinaryPacketHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 filesize_;
  ::google::protobuf::int32 fileoffset_;
  ::google::protobuf::int32 hashsize_;
  int binarypackettype_;
  friend void  protobuf_AddDesc_binarydata_2eproto();
  friend void protobuf_AssignDesc_binarydata_2eproto();
  friend void protobuf_ShutdownFile_binarydata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BinaryPacketHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// BinaryPacketHeader

// optional int32 FileSize = 1;
inline bool BinaryPacketHeader::has_filesize() const {
  return _has_bit(0);
}
inline void BinaryPacketHeader::clear_filesize() {
  filesize_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 BinaryPacketHeader::filesize() const {
  return filesize_;
}
inline void BinaryPacketHeader::set_filesize(::google::protobuf::int32 value) {
  _set_bit(0);
  filesize_ = value;
}

// optional int32 FileOffset = 2;
inline bool BinaryPacketHeader::has_fileoffset() const {
  return _has_bit(1);
}
inline void BinaryPacketHeader::clear_fileoffset() {
  fileoffset_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 BinaryPacketHeader::fileoffset() const {
  return fileoffset_;
}
inline void BinaryPacketHeader::set_fileoffset(::google::protobuf::int32 value) {
  _set_bit(1);
  fileoffset_ = value;
}

// optional int32 HashSize = 3;
inline bool BinaryPacketHeader::has_hashsize() const {
  return _has_bit(2);
}
inline void BinaryPacketHeader::clear_hashsize() {
  hashsize_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 BinaryPacketHeader::hashsize() const {
  return hashsize_;
}
inline void BinaryPacketHeader::set_hashsize(::google::protobuf::int32 value) {
  _set_bit(2);
  hashsize_ = value;
}

// optional .syncro.BinaryPacketHeader.SectionType BinaryPacketType = 4;
inline bool BinaryPacketHeader::has_binarypackettype() const {
  return _has_bit(3);
}
inline void BinaryPacketHeader::clear_binarypackettype() {
  binarypackettype_ = 0;
  _clear_bit(3);
}
inline ::syncro::BinaryPacketHeader_SectionType BinaryPacketHeader::binarypackettype() const {
  return static_cast< ::syncro::BinaryPacketHeader_SectionType >(binarypackettype_);
}
inline void BinaryPacketHeader::set_binarypackettype(::syncro::BinaryPacketHeader_SectionType value) {
  GOOGLE_DCHECK(::syncro::BinaryPacketHeader_SectionType_IsValid(value));
  _set_bit(3);
  binarypackettype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace syncro

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::syncro::BinaryPacketHeader_SectionType>() {
  return ::syncro::BinaryPacketHeader_SectionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_binarydata_2eproto__INCLUDED
