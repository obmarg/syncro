import subprocess
import os
import sys

platform = sys.platform
if platform != "win32":
	platform = "linux"

if platform != "win32":
	platform = "linux"

#
# Make all the directories needed for protocol_buffers
#
Execute( Mkdir( "../Messages/gen" ) )
Execute( Mkdir( "libsyncro/src/protocol_buffers" ) )
Execute( Mkdir( 'libsyncro/include/libsyncro/protocol_buffers/' ) )

#TODO: Would be good if the below only ran when needed
if platform == "linux":
	subprocess.call( ["./build.sh",""], shell=True, cwd="../Messages" )
else:
	subprocess.call( ["build.bat",""], shell=True, cwd="../Messages" )

debug = ARGUMENTS.get( 'debug', 0 )

buildtype = 'release'

if int(debug):
	buildtype = 'debug'

installdir = Dir( 'bin' )

builddir= platform + '_x86_' + buildtype

testdir = Dir( 'test_' + builddir )

ccflags = []
cppflags = []
lflags = []
cppdefines = [ 'BOOST_FILESYSTEM_VERSION=2' ]
cpppath = [ "include" ]
libpath = []

libs = [ 
	'syncro', 
	'kode', 
	'sqlite3'
	]

if platform == 'linux':
	cppdefines += [ "_LINUX", "LINUX" ]
	if int(debug):
		ccflags += [ '-g', '-fpermissive' ]
	cppflags = ccflags
	libs += [
		'boost_system', 
		'boost_thread', 
		'boost_filesystem', 
		'boost_regex', 
		'boost_date_time', 
		'boost_program_options',
		'crypto++',
		'protobuf-lite'
		]

if platform == 'win32':
	ccflags += [ '/nologo', '/W3', '/WX', '/FC', '/Z7', '/Zl' ]
	lflags += [ '/MAP', '/MANIFEST:NO',	'/MACHINE:X86' ]
	if int(debug):
		ccflags += [ '/Od', '/MDd', '/RTC1' ]
		lflags += [ '/DEBUG' ]
	else:
		ccflags += [ '/O2', '/Oy-', '/MD', '/GL', '/Gy' ]
		lflags += [ '/OPT:REF', '/OPT:ICF', '/LTCG' ]

	cppflags = ccflags + [ '/EHsc', '/GR' ]
	cppdefines += [ 
		'WIN32', '_CONSOLE', '_WIN32_WINNT=0x0501',
		'_SCL_SECURE_NO_WARNINGS'
		]

	#Old debug flags copied from msvc dialog.
	#ccflags += [ 
	#	'/EHsc', '/GS', '/fp:precise', '/Zc:wchar_t', 
	#	'/Zc:forScope', '/Fd"Debug\vc100.pdb"', '/Gd', '/analyze-', 
	#	'/errorReport:queue'
	#	]
	
	#TODO: Make these dependency paths a bit more generic
	cpppath += [ 
		Dir( "../Dependencies/sqlite/" ), 
		Dir( "../Dependencies/cppunit-1.12.1/include/" ),
		Dir( "../Dependencies/" ),
		Dir( "../Dependencies/protobuf-2.3.0/include/" ),
		Dir( "../../boost_1_44_0/" )
		]
	buildtype = 'Release'
	if int(debug):
		buildtype = 'Debug'
	libpath += [ 
		Dir( "../Dependencies/sqlite/" + buildtype ), 
		Dir( "../Dependencies/cppunit-1.12.1/lib" ),
		Dir( "../Dependencies/cryptopp/Win32/Output/" + buildtype ),
		Dir( "../Dependencies/protobuf-2.3.0/lib/" + buildtype ),
		Dir( "../../boost_1_44_0/stage/lib" )
		]
	libs += [ 'libprotobuf-lite', 'cryptlib' ]
	
if int(debug):
	cppdefines += [ '_DEBUG' ]
else:
	cppdefines += [ 'NDEBUG' ]


cppdirs = [
	Dir( "kode/include/" ), 
	Dir( "libsyncro/include/" ), 
	] 

libsyncrodirs = [
	Dir( "libsyncro/include/libsyncro/" ),
	Dir( "libsyncro/include/libsyncro/protocol_buffers" )
	]

libtargetdir = Dir( "lib/" + builddir )

libpath += [ 
	libtargetdir
	] 

env = Environment()


env.Append( 
	CPPPATH = cpppath, 
	LIBPATH=libpath, 
	CPPDEFINES=cppdefines,
	CCFLAGS=ccflags,
	CXXFLAGS=cppflags,
	LINKFLAGS=lflags
	)
env.Append( CPPPATH= cppdirs )

Export(
	'env',
	'libs',
	'libsyncrodirs',
	'libtargetdir',
	'installdir',
	'testdir',
	'platform',
	'debug'
	)

SConscript( 'SConscript', variant_dir=builddir, duplicate=0 )

#
# Targets
#
alltargets = [
	'libs',
	'bin',
	'test'
	]


env.Alias( 'libs', libtargetdir )
env.Alias( 'bin', installdir )
env.Alias( 'test', testdir )
env.Alias( 'all', alltargets )

Default( 'all' )
