// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "folders.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace syncro {
namespace pb {

void protobuf_ShutdownFile_folders_2eproto() {
  delete FolderListRequest::default_instance_;
  delete FolderInfo::default_instance_;
  delete FolderList::default_instance_;
}

void protobuf_AddDesc_folders_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  FolderListRequest::default_instance_ = new FolderListRequest();
  FolderInfo::default_instance_ = new FolderInfo();
  FolderList::default_instance_ = new FolderList();
  FolderListRequest::default_instance_->InitAsDefaultInstance();
  FolderInfo::default_instance_->InitAsDefaultInstance();
  FolderList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_folders_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_folders_2eproto {
  StaticDescriptorInitializer_folders_2eproto() {
    protobuf_AddDesc_folders_2eproto();
  }
} static_descriptor_initializer_folders_2eproto_;


// ===================================================================

const ::std::string FolderListRequest::_default_search_string_;
#ifndef _MSC_VER
const int FolderListRequest::kSearchStringFieldNumber;
const int FolderListRequest::kWritableFieldNumber;
const int FolderListRequest::kReadableFieldNumber;
#endif  // !_MSC_VER

FolderListRequest::FolderListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FolderListRequest::InitAsDefaultInstance() {
}

FolderListRequest::FolderListRequest(const FolderListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FolderListRequest::SharedCtor() {
  _cached_size_ = 0;
  search_string_ = const_cast< ::std::string*>(&_default_search_string_);
  writable_ = false;
  readable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FolderListRequest::~FolderListRequest() {
  SharedDtor();
}

void FolderListRequest::SharedDtor() {
  if (search_string_ != &_default_search_string_) {
    delete search_string_;
  }
  if (this != default_instance_) {
  }
}

void FolderListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FolderListRequest& FolderListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_folders_2eproto();  return *default_instance_;
}

FolderListRequest* FolderListRequest::default_instance_ = NULL;

FolderListRequest* FolderListRequest::New() const {
  return new FolderListRequest;
}

void FolderListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (search_string_ != &_default_search_string_) {
        search_string_->clear();
      }
    }
    writable_ = false;
    readable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FolderListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_writable;
        break;
      }
      
      // optional bool writable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writable_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_readable;
        break;
      }
      
      // optional bool readable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readable_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FolderListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string search_string = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->search_string(), output);
  }
  
  // optional bool writable = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->writable(), output);
  }
  
  // optional bool readable = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->readable(), output);
  }
  
}

int FolderListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search_string = 1;
    if (has_search_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_string());
    }
    
    // optional bool writable = 2;
    if (has_writable()) {
      total_size += 1 + 1;
    }
    
    // optional bool readable = 3;
    if (has_readable()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolderListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FolderListRequest*>(&from));
}

void FolderListRequest::MergeFrom(const FolderListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_search_string(from.search_string());
    }
    if (from._has_bit(1)) {
      set_writable(from.writable());
    }
    if (from._has_bit(2)) {
      set_readable(from.readable());
    }
  }
}

void FolderListRequest::CopyFrom(const FolderListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderListRequest::IsInitialized() const {
  
  return true;
}

void FolderListRequest::Swap(FolderListRequest* other) {
  if (other != this) {
    std::swap(search_string_, other->search_string_);
    std::swap(writable_, other->writable_);
    std::swap(readable_, other->readable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FolderListRequest::GetTypeName() const {
  return "syncro.pb.FolderListRequest";
}


// ===================================================================

const ::std::string FolderInfo::_default_folder_name_;
#ifndef _MSC_VER
const int FolderInfo::kFolderIdFieldNumber;
const int FolderInfo::kFolderNameFieldNumber;
const int FolderInfo::kCanWriteFieldNumber;
const int FolderInfo::kCanReadFieldNumber;
#endif  // !_MSC_VER

FolderInfo::FolderInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FolderInfo::InitAsDefaultInstance() {
}

FolderInfo::FolderInfo(const FolderInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FolderInfo::SharedCtor() {
  _cached_size_ = 0;
  folder_id_ = 0;
  folder_name_ = const_cast< ::std::string*>(&_default_folder_name_);
  can_write_ = false;
  can_read_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FolderInfo::~FolderInfo() {
  SharedDtor();
}

void FolderInfo::SharedDtor() {
  if (folder_name_ != &_default_folder_name_) {
    delete folder_name_;
  }
  if (this != default_instance_) {
  }
}

void FolderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FolderInfo& FolderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_folders_2eproto();  return *default_instance_;
}

FolderInfo* FolderInfo::default_instance_ = NULL;

FolderInfo* FolderInfo::New() const {
  return new FolderInfo;
}

void FolderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    folder_id_ = 0;
    if (_has_bit(1)) {
      if (folder_name_ != &_default_folder_name_) {
        folder_name_->clear();
      }
    }
    can_write_ = false;
    can_read_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FolderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 folder_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &folder_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_folder_name;
        break;
      }
      
      // optional string folder_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_folder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_write;
        break;
      }
      
      // optional bool can_write = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_write:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_write_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_read;
        break;
      }
      
      // optional bool can_read = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_read_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FolderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 folder_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->folder_id(), output);
  }
  
  // optional string folder_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->folder_name(), output);
  }
  
  // optional bool can_write = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_write(), output);
  }
  
  // optional bool can_read = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_read(), output);
  }
  
}

int FolderInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 folder_id = 1;
    if (has_folder_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->folder_id());
    }
    
    // optional string folder_name = 2;
    if (has_folder_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->folder_name());
    }
    
    // optional bool can_write = 3;
    if (has_can_write()) {
      total_size += 1 + 1;
    }
    
    // optional bool can_read = 4;
    if (has_can_read()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolderInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FolderInfo*>(&from));
}

void FolderInfo::MergeFrom(const FolderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_folder_id(from.folder_id());
    }
    if (from._has_bit(1)) {
      set_folder_name(from.folder_name());
    }
    if (from._has_bit(2)) {
      set_can_write(from.can_write());
    }
    if (from._has_bit(3)) {
      set_can_read(from.can_read());
    }
  }
}

void FolderInfo::CopyFrom(const FolderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FolderInfo::Swap(FolderInfo* other) {
  if (other != this) {
    std::swap(folder_id_, other->folder_id_);
    std::swap(folder_name_, other->folder_name_);
    std::swap(can_write_, other->can_write_);
    std::swap(can_read_, other->can_read_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FolderInfo::GetTypeName() const {
  return "syncro.pb.FolderInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int FolderList::kFoldersFieldNumber;
#endif  // !_MSC_VER

FolderList::FolderList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FolderList::InitAsDefaultInstance() {
}

FolderList::FolderList(const FolderList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FolderList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FolderList::~FolderList() {
  SharedDtor();
}

void FolderList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FolderList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FolderList& FolderList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_folders_2eproto();  return *default_instance_;
}

FolderList* FolderList::default_instance_ = NULL;

FolderList* FolderList::New() const {
  return new FolderList;
}

void FolderList::Clear() {
  folders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FolderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .syncro.pb.FolderInfo folders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_folders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_folders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_folders;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FolderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .syncro.pb.FolderInfo folders = 1;
  for (int i = 0; i < this->folders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->folders(i), output);
  }
  
}

int FolderList::ByteSize() const {
  int total_size = 0;
  
  // repeated .syncro.pb.FolderInfo folders = 1;
  total_size += 1 * this->folders_size();
  for (int i = 0; i < this->folders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->folders(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolderList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FolderList*>(&from));
}

void FolderList::MergeFrom(const FolderList& from) {
  GOOGLE_CHECK_NE(&from, this);
  folders_.MergeFrom(from.folders_);
}

void FolderList::CopyFrom(const FolderList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderList::IsInitialized() const {
  
  for (int i = 0; i < folders_size(); i++) {
    if (!this->folders(i).IsInitialized()) return false;
  }
  return true;
}

void FolderList::Swap(FolderList* other) {
  if (other != this) {
    folders_.Swap(&other->folders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FolderList::GetTypeName() const {
  return "syncro.pb.FolderList";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace syncro

// @@protoc_insertion_point(global_scope)
