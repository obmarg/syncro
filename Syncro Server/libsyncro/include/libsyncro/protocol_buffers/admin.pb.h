// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin.proto

#ifndef PROTOBUF_admin_2eproto__INCLUDED
#define PROTOBUF_admin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace syncro {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_admin_2eproto();
void protobuf_AssignDesc_admin_2eproto();
void protobuf_ShutdownFile_admin_2eproto();

class GenericAdminCommand;
class AdminAck;

// ===================================================================

class GenericAdminCommand : public ::google::protobuf::MessageLite {
 public:
  GenericAdminCommand();
  virtual ~GenericAdminCommand();
  
  GenericAdminCommand(const GenericAdminCommand& from);
  
  inline GenericAdminCommand& operator=(const GenericAdminCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const GenericAdminCommand& default_instance();
  
  void Swap(GenericAdminCommand* other);
  
  // implements Message ----------------------------------------------
  
  GenericAdminCommand* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GenericAdminCommand& from);
  void MergeFrom(const GenericAdminCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  
  // optional string param = 2;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  
  // @@protoc_insertion_point(class_scope:syncro.pb.GenericAdminCommand)
 private:
  mutable int _cached_size_;
  
  ::std::string* command_;
  static const ::std::string _default_command_;
  ::std::string* param_;
  static const ::std::string _default_param_;
  friend void  protobuf_AddDesc_admin_2eproto();
  friend void protobuf_AssignDesc_admin_2eproto();
  friend void protobuf_ShutdownFile_admin_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GenericAdminCommand* default_instance_;
};
// -------------------------------------------------------------------

class AdminAck : public ::google::protobuf::MessageLite {
 public:
  AdminAck();
  virtual ~AdminAck();
  
  AdminAck(const AdminAck& from);
  
  inline AdminAck& operator=(const AdminAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AdminAck& default_instance();
  
  void Swap(AdminAck* other);
  
  // implements Message ----------------------------------------------
  
  AdminAck* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AdminAck& from);
  void MergeFrom(const AdminAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool ok = 1;
  inline bool has_ok() const;
  inline void clear_ok();
  static const int kOkFieldNumber = 1;
  inline bool ok() const;
  inline void set_ok(bool value);
  
  // optional int32 error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:syncro.pb.AdminAck)
 private:
  mutable int _cached_size_;
  
  bool ok_;
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_admin_2eproto();
  friend void protobuf_AssignDesc_admin_2eproto();
  friend void protobuf_ShutdownFile_admin_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AdminAck* default_instance_;
};
// ===================================================================


// ===================================================================

// GenericAdminCommand

// optional string command = 1;
inline bool GenericAdminCommand::has_command() const {
  return _has_bit(0);
}
inline void GenericAdminCommand::clear_command() {
  if (command_ != &_default_command_) {
    command_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GenericAdminCommand::command() const {
  return *command_;
}
inline void GenericAdminCommand::set_command(const ::std::string& value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void GenericAdminCommand::set_command(const char* value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void GenericAdminCommand::set_command(const char* value, size_t size) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenericAdminCommand::mutable_command() {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  return command_;
}

// optional string param = 2;
inline bool GenericAdminCommand::has_param() const {
  return _has_bit(1);
}
inline void GenericAdminCommand::clear_param() {
  if (param_ != &_default_param_) {
    param_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& GenericAdminCommand::param() const {
  return *param_;
}
inline void GenericAdminCommand::set_param(const ::std::string& value) {
  _set_bit(1);
  if (param_ == &_default_param_) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void GenericAdminCommand::set_param(const char* value) {
  _set_bit(1);
  if (param_ == &_default_param_) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void GenericAdminCommand::set_param(const char* value, size_t size) {
  _set_bit(1);
  if (param_ == &_default_param_) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenericAdminCommand::mutable_param() {
  _set_bit(1);
  if (param_ == &_default_param_) {
    param_ = new ::std::string;
  }
  return param_;
}

// -------------------------------------------------------------------

// AdminAck

// optional bool ok = 1;
inline bool AdminAck::has_ok() const {
  return _has_bit(0);
}
inline void AdminAck::clear_ok() {
  ok_ = false;
  _clear_bit(0);
}
inline bool AdminAck::ok() const {
  return ok_;
}
inline void AdminAck::set_ok(bool value) {
  _set_bit(0);
  ok_ = value;
}

// optional int32 error_code = 2;
inline bool AdminAck::has_error_code() const {
  return _has_bit(1);
}
inline void AdminAck::clear_error_code() {
  error_code_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 AdminAck::error_code() const {
  return error_code_;
}
inline void AdminAck::set_error_code(::google::protobuf::int32 value) {
  _set_bit(1);
  error_code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace syncro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_admin_2eproto__INCLUDED
