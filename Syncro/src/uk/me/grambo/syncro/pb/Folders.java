// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: folders.proto

package uk.me.grambo.syncro.pb;

public final class Folders {
  private Folders() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public static final class FolderListRequest extends
      com.google.protobuf.GeneratedMessageLite {
    // Use FolderListRequest.newBuilder() to construct.
    private FolderListRequest() {
      initFields();
    }
    private FolderListRequest(boolean noInit) {}
    
    private static final FolderListRequest defaultInstance;
    public static FolderListRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FolderListRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional string search_string = 1;
    public static final int SEARCH_STRING_FIELD_NUMBER = 1;
    private boolean hasSearchString;
    private java.lang.String searchString_ = "";
    public boolean hasSearchString() { return hasSearchString; }
    public java.lang.String getSearchString() { return searchString_; }
    
    // optional bool writable = 2;
    public static final int WRITABLE_FIELD_NUMBER = 2;
    private boolean hasWritable;
    private boolean writable_ = false;
    public boolean hasWritable() { return hasWritable; }
    public boolean getWritable() { return writable_; }
    
    // optional bool readable = 3;
    public static final int READABLE_FIELD_NUMBER = 3;
    private boolean hasReadable;
    private boolean readable_ = false;
    public boolean hasReadable() { return hasReadable; }
    public boolean getReadable() { return readable_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSearchString()) {
        output.writeString(1, getSearchString());
      }
      if (hasWritable()) {
        output.writeBool(2, getWritable());
      }
      if (hasReadable()) {
        output.writeBool(3, getReadable());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSearchString()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSearchString());
      }
      if (hasWritable()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getWritable());
      }
      if (hasReadable()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getReadable());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderListRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(uk.me.grambo.syncro.pb.Folders.FolderListRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          uk.me.grambo.syncro.pb.Folders.FolderListRequest, Builder> {
      private uk.me.grambo.syncro.pb.Folders.FolderListRequest result;
      
      // Construct using uk.me.grambo.syncro.pb.Folders.FolderListRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new uk.me.grambo.syncro.pb.Folders.FolderListRequest();
        return builder;
      }
      
      protected uk.me.grambo.syncro.pb.Folders.FolderListRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new uk.me.grambo.syncro.pb.Folders.FolderListRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public uk.me.grambo.syncro.pb.Folders.FolderListRequest getDefaultInstanceForType() {
        return uk.me.grambo.syncro.pb.Folders.FolderListRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public uk.me.grambo.syncro.pb.Folders.FolderListRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private uk.me.grambo.syncro.pb.Folders.FolderListRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public uk.me.grambo.syncro.pb.Folders.FolderListRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        uk.me.grambo.syncro.pb.Folders.FolderListRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(uk.me.grambo.syncro.pb.Folders.FolderListRequest other) {
        if (other == uk.me.grambo.syncro.pb.Folders.FolderListRequest.getDefaultInstance()) return this;
        if (other.hasSearchString()) {
          setSearchString(other.getSearchString());
        }
        if (other.hasWritable()) {
          setWritable(other.getWritable());
        }
        if (other.hasReadable()) {
          setReadable(other.getReadable());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setSearchString(input.readString());
              break;
            }
            case 16: {
              setWritable(input.readBool());
              break;
            }
            case 24: {
              setReadable(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional string search_string = 1;
      public boolean hasSearchString() {
        return result.hasSearchString();
      }
      public java.lang.String getSearchString() {
        return result.getSearchString();
      }
      public Builder setSearchString(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSearchString = true;
        result.searchString_ = value;
        return this;
      }
      public Builder clearSearchString() {
        result.hasSearchString = false;
        result.searchString_ = getDefaultInstance().getSearchString();
        return this;
      }
      
      // optional bool writable = 2;
      public boolean hasWritable() {
        return result.hasWritable();
      }
      public boolean getWritable() {
        return result.getWritable();
      }
      public Builder setWritable(boolean value) {
        result.hasWritable = true;
        result.writable_ = value;
        return this;
      }
      public Builder clearWritable() {
        result.hasWritable = false;
        result.writable_ = false;
        return this;
      }
      
      // optional bool readable = 3;
      public boolean hasReadable() {
        return result.hasReadable();
      }
      public boolean getReadable() {
        return result.getReadable();
      }
      public Builder setReadable(boolean value) {
        result.hasReadable = true;
        result.readable_ = value;
        return this;
      }
      public Builder clearReadable() {
        result.hasReadable = false;
        result.readable_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:syncro.pb.FolderListRequest)
    }
    
    static {
      defaultInstance = new FolderListRequest(true);
      uk.me.grambo.syncro.pb.Folders.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:syncro.pb.FolderListRequest)
  }
  
  public static final class FolderInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use FolderInfo.newBuilder() to construct.
    private FolderInfo() {
      initFields();
    }
    private FolderInfo(boolean noInit) {}
    
    private static final FolderInfo defaultInstance;
    public static FolderInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public FolderInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required int32 folder_id = 1;
    public static final int FOLDER_ID_FIELD_NUMBER = 1;
    private boolean hasFolderId;
    private int folderId_ = 0;
    public boolean hasFolderId() { return hasFolderId; }
    public int getFolderId() { return folderId_; }
    
    // optional string folder_name = 2;
    public static final int FOLDER_NAME_FIELD_NUMBER = 2;
    private boolean hasFolderName;
    private java.lang.String folderName_ = "";
    public boolean hasFolderName() { return hasFolderName; }
    public java.lang.String getFolderName() { return folderName_; }
    
    // optional bool can_write = 3;
    public static final int CAN_WRITE_FIELD_NUMBER = 3;
    private boolean hasCanWrite;
    private boolean canWrite_ = false;
    public boolean hasCanWrite() { return hasCanWrite; }
    public boolean getCanWrite() { return canWrite_; }
    
    // optional bool can_read = 4;
    public static final int CAN_READ_FIELD_NUMBER = 4;
    private boolean hasCanRead;
    private boolean canRead_ = false;
    public boolean hasCanRead() { return hasCanRead; }
    public boolean getCanRead() { return canRead_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasFolderId) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasFolderId()) {
        output.writeInt32(1, getFolderId());
      }
      if (hasFolderName()) {
        output.writeString(2, getFolderName());
      }
      if (hasCanWrite()) {
        output.writeBool(3, getCanWrite());
      }
      if (hasCanRead()) {
        output.writeBool(4, getCanRead());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasFolderId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getFolderId());
      }
      if (hasFolderName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getFolderName());
      }
      if (hasCanWrite()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getCanWrite());
      }
      if (hasCanRead()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, getCanRead());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(uk.me.grambo.syncro.pb.Folders.FolderInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          uk.me.grambo.syncro.pb.Folders.FolderInfo, Builder> {
      private uk.me.grambo.syncro.pb.Folders.FolderInfo result;
      
      // Construct using uk.me.grambo.syncro.pb.Folders.FolderInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new uk.me.grambo.syncro.pb.Folders.FolderInfo();
        return builder;
      }
      
      protected uk.me.grambo.syncro.pb.Folders.FolderInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new uk.me.grambo.syncro.pb.Folders.FolderInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public uk.me.grambo.syncro.pb.Folders.FolderInfo getDefaultInstanceForType() {
        return uk.me.grambo.syncro.pb.Folders.FolderInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public uk.me.grambo.syncro.pb.Folders.FolderInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private uk.me.grambo.syncro.pb.Folders.FolderInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public uk.me.grambo.syncro.pb.Folders.FolderInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        uk.me.grambo.syncro.pb.Folders.FolderInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(uk.me.grambo.syncro.pb.Folders.FolderInfo other) {
        if (other == uk.me.grambo.syncro.pb.Folders.FolderInfo.getDefaultInstance()) return this;
        if (other.hasFolderId()) {
          setFolderId(other.getFolderId());
        }
        if (other.hasFolderName()) {
          setFolderName(other.getFolderName());
        }
        if (other.hasCanWrite()) {
          setCanWrite(other.getCanWrite());
        }
        if (other.hasCanRead()) {
          setCanRead(other.getCanRead());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setFolderId(input.readInt32());
              break;
            }
            case 18: {
              setFolderName(input.readString());
              break;
            }
            case 24: {
              setCanWrite(input.readBool());
              break;
            }
            case 32: {
              setCanRead(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // required int32 folder_id = 1;
      public boolean hasFolderId() {
        return result.hasFolderId();
      }
      public int getFolderId() {
        return result.getFolderId();
      }
      public Builder setFolderId(int value) {
        result.hasFolderId = true;
        result.folderId_ = value;
        return this;
      }
      public Builder clearFolderId() {
        result.hasFolderId = false;
        result.folderId_ = 0;
        return this;
      }
      
      // optional string folder_name = 2;
      public boolean hasFolderName() {
        return result.hasFolderName();
      }
      public java.lang.String getFolderName() {
        return result.getFolderName();
      }
      public Builder setFolderName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasFolderName = true;
        result.folderName_ = value;
        return this;
      }
      public Builder clearFolderName() {
        result.hasFolderName = false;
        result.folderName_ = getDefaultInstance().getFolderName();
        return this;
      }
      
      // optional bool can_write = 3;
      public boolean hasCanWrite() {
        return result.hasCanWrite();
      }
      public boolean getCanWrite() {
        return result.getCanWrite();
      }
      public Builder setCanWrite(boolean value) {
        result.hasCanWrite = true;
        result.canWrite_ = value;
        return this;
      }
      public Builder clearCanWrite() {
        result.hasCanWrite = false;
        result.canWrite_ = false;
        return this;
      }
      
      // optional bool can_read = 4;
      public boolean hasCanRead() {
        return result.hasCanRead();
      }
      public boolean getCanRead() {
        return result.getCanRead();
      }
      public Builder setCanRead(boolean value) {
        result.hasCanRead = true;
        result.canRead_ = value;
        return this;
      }
      public Builder clearCanRead() {
        result.hasCanRead = false;
        result.canRead_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:syncro.pb.FolderInfo)
    }
    
    static {
      defaultInstance = new FolderInfo(true);
      uk.me.grambo.syncro.pb.Folders.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:syncro.pb.FolderInfo)
  }
  
  public static final class FolderList extends
      com.google.protobuf.GeneratedMessageLite {
    // Use FolderList.newBuilder() to construct.
    private FolderList() {
      initFields();
    }
    private FolderList(boolean noInit) {}
    
    private static final FolderList defaultInstance;
    public static FolderList getDefaultInstance() {
      return defaultInstance;
    }
    
    public FolderList getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // repeated .syncro.pb.FolderInfo folders = 1;
    public static final int FOLDERS_FIELD_NUMBER = 1;
    private java.util.List<uk.me.grambo.syncro.pb.Folders.FolderInfo> folders_ =
      java.util.Collections.emptyList();
    public java.util.List<uk.me.grambo.syncro.pb.Folders.FolderInfo> getFoldersList() {
      return folders_;
    }
    public int getFoldersCount() { return folders_.size(); }
    public uk.me.grambo.syncro.pb.Folders.FolderInfo getFolders(int index) {
      return folders_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (uk.me.grambo.syncro.pb.Folders.FolderInfo element : getFoldersList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (uk.me.grambo.syncro.pb.Folders.FolderInfo element : getFoldersList()) {
        output.writeMessage(1, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (uk.me.grambo.syncro.pb.Folders.FolderInfo element : getFoldersList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static uk.me.grambo.syncro.pb.Folders.FolderList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(uk.me.grambo.syncro.pb.Folders.FolderList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          uk.me.grambo.syncro.pb.Folders.FolderList, Builder> {
      private uk.me.grambo.syncro.pb.Folders.FolderList result;
      
      // Construct using uk.me.grambo.syncro.pb.Folders.FolderList.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new uk.me.grambo.syncro.pb.Folders.FolderList();
        return builder;
      }
      
      protected uk.me.grambo.syncro.pb.Folders.FolderList internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new uk.me.grambo.syncro.pb.Folders.FolderList();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public uk.me.grambo.syncro.pb.Folders.FolderList getDefaultInstanceForType() {
        return uk.me.grambo.syncro.pb.Folders.FolderList.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public uk.me.grambo.syncro.pb.Folders.FolderList build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private uk.me.grambo.syncro.pb.Folders.FolderList buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public uk.me.grambo.syncro.pb.Folders.FolderList buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.folders_ != java.util.Collections.EMPTY_LIST) {
          result.folders_ =
            java.util.Collections.unmodifiableList(result.folders_);
        }
        uk.me.grambo.syncro.pb.Folders.FolderList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(uk.me.grambo.syncro.pb.Folders.FolderList other) {
        if (other == uk.me.grambo.syncro.pb.Folders.FolderList.getDefaultInstance()) return this;
        if (!other.folders_.isEmpty()) {
          if (result.folders_.isEmpty()) {
            result.folders_ = new java.util.ArrayList<uk.me.grambo.syncro.pb.Folders.FolderInfo>();
          }
          result.folders_.addAll(other.folders_);
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              uk.me.grambo.syncro.pb.Folders.FolderInfo.Builder subBuilder = uk.me.grambo.syncro.pb.Folders.FolderInfo.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addFolders(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .syncro.pb.FolderInfo folders = 1;
      public java.util.List<uk.me.grambo.syncro.pb.Folders.FolderInfo> getFoldersList() {
        return java.util.Collections.unmodifiableList(result.folders_);
      }
      public int getFoldersCount() {
        return result.getFoldersCount();
      }
      public uk.me.grambo.syncro.pb.Folders.FolderInfo getFolders(int index) {
        return result.getFolders(index);
      }
      public Builder setFolders(int index, uk.me.grambo.syncro.pb.Folders.FolderInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.folders_.set(index, value);
        return this;
      }
      public Builder setFolders(int index, uk.me.grambo.syncro.pb.Folders.FolderInfo.Builder builderForValue) {
        result.folders_.set(index, builderForValue.build());
        return this;
      }
      public Builder addFolders(uk.me.grambo.syncro.pb.Folders.FolderInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.folders_.isEmpty()) {
          result.folders_ = new java.util.ArrayList<uk.me.grambo.syncro.pb.Folders.FolderInfo>();
        }
        result.folders_.add(value);
        return this;
      }
      public Builder addFolders(uk.me.grambo.syncro.pb.Folders.FolderInfo.Builder builderForValue) {
        if (result.folders_.isEmpty()) {
          result.folders_ = new java.util.ArrayList<uk.me.grambo.syncro.pb.Folders.FolderInfo>();
        }
        result.folders_.add(builderForValue.build());
        return this;
      }
      public Builder addAllFolders(
          java.lang.Iterable<? extends uk.me.grambo.syncro.pb.Folders.FolderInfo> values) {
        if (result.folders_.isEmpty()) {
          result.folders_ = new java.util.ArrayList<uk.me.grambo.syncro.pb.Folders.FolderInfo>();
        }
        super.addAll(values, result.folders_);
        return this;
      }
      public Builder clearFolders() {
        result.folders_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:syncro.pb.FolderList)
    }
    
    static {
      defaultInstance = new FolderList(true);
      uk.me.grambo.syncro.pb.Folders.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:syncro.pb.FolderList)
  }
  
  
  static {
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
